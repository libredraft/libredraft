/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/canvas/canvas.ts":
/*!******************************!*\
  !*** ./src/canvas/canvas.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Canvas = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../stateManager */ \"./src/stateManager.ts\");\nclass Canvas {\n    constructor() {\n        this.canvasElement = Canvas.getCanvasElement();\n        this.handleMouseMove = (event) => {\n            document.getElementById(\"coordinates\").textContent = `${event.offsetX}, ${event.offsetY}`;\n        };\n        this.handleMouseWheel = (event) => {\n            event.preventDefault();\n            let viewBox = this.canvasElement.getAttribute(\"viewBox\").split(\" \");\n            const { deltaY } = event;\n            const zoomFactor = 0.05;\n            const zoomDeltaX = parseInt(viewBox[2]) * Math.sign(deltaY) * zoomFactor;\n            const zoomDeltaY = parseInt(viewBox[3]) * Math.sign(deltaY) * zoomFactor;\n            const zoomCenterX = event.offsetX / this.canvasElement.clientWidth;\n            const zoomCenterY = event.offsetY / this.canvasElement.clientHeight;\n            viewBox = [\n                (parseInt(viewBox[0]) + zoomDeltaX * zoomCenterX).toString(),\n                (parseInt(viewBox[1]) + zoomDeltaY * zoomCenterY).toString(),\n                (parseInt(viewBox[2]) - zoomDeltaX).toString(),\n                (parseInt(viewBox[3]) - zoomDeltaY).toString(),\n            ];\n            const zoom = this.canvasElement.clientWidth / parseInt(viewBox[2]);\n            document.getElementById(\"zoom-value\").innerText = `${Math.round(zoom * 100)}%`;\n            if (zoom > 0.2 && zoom < 4) {\n                this.canvasElement.setAttribute(\"viewBox\", `${viewBox[0]} ${viewBox[1]} ${viewBox[2]} ${viewBox[3]}`);\n            }\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { zoom: zoom })));\n        };\n        // new Grid();\n        this.initializeViewBox();\n        this.attachEventListeners();\n    }\n    static getCanvasElement() {\n        const canvasElement = document.getElementById(\"canvas\");\n        if (canvasElement && canvasElement instanceof SVGElement) {\n            return canvasElement;\n        }\n        else {\n            throw new Error(\"Canvas element not found or is not an SVGElement\");\n        }\n    }\n    initializeViewBox() {\n        this.canvasElement.setAttribute(\"viewBox\", `0 0 ${this.canvasElement.clientWidth} ${this.canvasElement.clientHeight}`);\n    }\n    attachEventListeners() {\n        this.canvasElement.addEventListener(\"mousemove\", this.handleMouseMove);\n        this.canvasElement.addEventListener(\"wheel\", this.handleMouseWheel);\n    }\n    static unSelectAll() {\n        const canvasElement = new Canvas().canvasElement;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        const elements = canvasElement.querySelectorAll(\"*\");\n        for (const element of elements) {\n            if (element.getAttribute(\"stroke\") === \"blue\") {\n                element.setAttribute(\"stroke\", \"white\");\n            }\n            if (element.id && element.id.includes(\"marker\")) {\n                element.setAttribute(\"visibility\", \"hidden\");\n            }\n        }\n    }\n}\nexports.Canvas = Canvas;\n\n\n//# sourceURL=webpack://LibreDraft/./src/canvas/canvas.ts?");

/***/ }),

/***/ "./src/canvas/canvasContainer.ts":
/*!***************************************!*\
  !*** ./src/canvas/canvasContainer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasContainer = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../stateManager */ \"./src/stateManager.ts\");\nconst canvas_1 = __webpack_require__(/*! ./canvas */ \"./src/canvas/canvas.ts\");\nclass CanvasContainer {\n    constructor() {\n        this.canvasContainer = document.getElementById(\"canvas-container\");\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.isPanning = false;\n        this.startPoint = null;\n        this.handleMouseDown = (event) => {\n            var _a;\n            this.canvas.style.cursor = \"grab\";\n            if (!(0, stateManager_1.getState)().isDrawing &&\n                !(0, stateManager_1.getState)().isEditing &&\n                !(0, stateManager_1.getState)().isMoving) {\n                const viewBoxArray = (_a = this.canvas.getAttribute(\"viewBox\")) === null || _a === void 0 ? void 0 : _a.split(\" \");\n                if (viewBoxArray) {\n                    this.viewBox = {\n                        x: parseInt(viewBoxArray[0]),\n                        y: parseInt(viewBoxArray[1]),\n                        w: parseInt(viewBoxArray[2]),\n                        h: parseInt(viewBoxArray[3]),\n                    };\n                    this.zoom = this.canvas.clientWidth / this.viewBox.w;\n                }\n                this.isPanning = true;\n                this.startPoint = { x: event.offsetX, y: event.offsetY };\n            }\n        };\n        this.handleMouseMove = (event) => {\n            if (this.isPanning) {\n                this.zoom = this.canvas.clientWidth / this.viewBox.w;\n                const endPoint = { x: event.offsetX, y: event.offsetY };\n                const dx = (this.startPoint.x - endPoint.x) / this.zoom;\n                const dy = (this.startPoint.y - endPoint.y) / this.zoom;\n                const movedViewBox = {\n                    x: this.viewBox.x + dx,\n                    y: this.viewBox.y + dy,\n                    w: this.viewBox.w,\n                    h: this.viewBox.h,\n                };\n                this.canvas.setAttribute(\"viewBox\", `${movedViewBox.x} ${movedViewBox.y} ${movedViewBox.w} ${movedViewBox.h}`);\n            }\n        };\n        this.handleMouseUp = (event) => {\n            this.canvas.style.cursor = \"crosshair\";\n            if (this.isPanning) {\n                this.isPanning = false;\n            }\n        };\n        this.initializeViewBox();\n        this.attachEventListeners();\n    }\n    initializeViewBox() {\n        var _a;\n        const viewBoxArray = (_a = this.canvas.getAttribute(\"viewBox\")) === null || _a === void 0 ? void 0 : _a.split(\" \");\n        if (viewBoxArray) {\n            this.viewBox = {\n                x: parseInt(viewBoxArray[0]),\n                y: parseInt(viewBoxArray[1]),\n                w: parseInt(viewBoxArray[2]),\n                h: parseInt(viewBoxArray[3]),\n            };\n            this.zoom = this.canvas.clientWidth / this.viewBox.w;\n        }\n    }\n    attachEventListeners() {\n        this.canvasContainer.addEventListener(\"mousedown\", this.handleMouseDown);\n        this.canvasContainer.addEventListener(\"mousemove\", this.handleMouseMove);\n        this.canvasContainer.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n}\nexports.CanvasContainer = CanvasContainer;\n\n\n//# sourceURL=webpack://LibreDraft/./src/canvas/canvasContainer.ts?");

/***/ }),

/***/ "./src/canvas/index.ts":
/*!*****************************!*\
  !*** ./src/canvas/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasContainer = exports.Canvas = void 0;\nvar canvas_1 = __webpack_require__(/*! ./canvas */ \"./src/canvas/canvas.ts\");\nObject.defineProperty(exports, \"Canvas\", ({ enumerable: true, get: function () { return canvas_1.Canvas; } }));\nvar canvasContainer_1 = __webpack_require__(/*! ./canvasContainer */ \"./src/canvas/canvasContainer.ts\");\nObject.defineProperty(exports, \"CanvasContainer\", ({ enumerable: true, get: function () { return canvasContainer_1.CanvasContainer; } }));\n\n\n//# sourceURL=webpack://LibreDraft/./src/canvas/index.ts?");

/***/ }),

/***/ "./src/elements/arc/arc.ts":
/*!*********************************!*\
  !*** ./src/elements/arc/arc.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Arc = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst marker_1 = __webpack_require__(/*! ../marker */ \"./src/elements/marker.ts\");\nconst arcListener_1 = __webpack_require__(/*! ./arcListener */ \"./src/elements/arc/arcListener.ts\");\nconst markerListener_1 = __webpack_require__(/*! ./markerListener */ \"./src/elements/arc/markerListener.ts\");\nconst utility_1 = __webpack_require__(/*! ./utility */ \"./src/elements/arc/utility.ts\");\nclass Arc {\n    constructor(stroke = \"#FFFFFF\", strokeWidth = 1, fill = \"transparent\", opacity = 1) {\n        this.id = crypto.randomUUID();\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.fill = fill;\n        this.opacity = opacity;\n    }\n    init() {\n        const arcElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        arcElement.setAttribute(\"id\", this.id);\n        arcElement.setAttribute(\"stroke\", this.stroke);\n        arcElement.setAttribute(\"stroke-width\", this.strokeWidth.toString());\n        arcElement.setAttribute(\"fill\", this.fill);\n        arcElement.setAttribute(\"opacity\", this.opacity.toString());\n        Arc.canvas.appendChild(arcElement);\n        new arcListener_1.ArcListener().attachListenersToArc(arcElement);\n        const startMarker = new marker_1.Marker(`marker_start_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(startMarker);\n        const midMarker = new marker_1.Marker(`marker_mid_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(midMarker);\n        const endMarker = new marker_1.Marker(`marker_end_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(endMarker);\n        const centerMarker = new marker_1.Marker(`marker_center_${this.id}`, 4, \"green\").init();\n        new markerListener_1.MarkerListener(centerMarker);\n        return arcElement;\n    }\n    static update(arcElement, x1, y1, x2, y2, x3, y3) {\n        const arcModel = (0, utility_1.createArc)(x1, y1, x2, y2, x3, y3);\n        if (arcModel) {\n            const d = arcModel.d;\n            const cx = arcModel.cx;\n            const cy = arcModel.cy;\n            arcElement.setAttribute(\"d\", d);\n            const startMarker = document.getElementById(\"marker_start_\" + arcElement.id);\n            const midMarker = document.getElementById(\"marker_mid_\" + arcElement.id);\n            const endMarker = document.getElementById(\"marker_end_\" + arcElement.id);\n            startMarker.setAttribute(\"cx\", x1.toString());\n            startMarker.setAttribute(\"cy\", y1.toString());\n            midMarker.setAttribute(\"cx\", x2.toString());\n            midMarker.setAttribute(\"cy\", y2.toString());\n            endMarker.setAttribute(\"cx\", x3.toString());\n            endMarker.setAttribute(\"cy\", y3.toString());\n            const centerMarker = document.getElementById(\"marker_center_\" + arcElement.id);\n            centerMarker.setAttribute(\"cx\", cx.toString());\n            centerMarker.setAttribute(\"cy\", cy.toString());\n        }\n        return arcElement;\n    }\n    static remove(arcElement) {\n        this.canvas.removeChild(arcElement);\n        const startMarker = document.getElementById(\"marker_start_\" + arcElement.id);\n        this.canvas.removeChild(startMarker);\n        const midMarker = document.getElementById(\"marker_mid_\" + arcElement.id);\n        this.canvas.removeChild(midMarker);\n        const endMarker = document.getElementById(\"marker_end_\" + arcElement.id);\n        this.canvas.removeChild(endMarker);\n        const centerMarker = document.getElementById(\"marker_center_\" + arcElement.id);\n        this.canvas.removeChild(centerMarker);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n    }\n}\nexports.Arc = Arc;\nArc.canvas = canvas_1.Canvas.getCanvasElement();\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/arc/arc.ts?");

/***/ }),

/***/ "./src/elements/arc/arcListener.ts":
/*!*****************************************!*\
  !*** ./src/elements/arc/arcListener.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ArcListener = void 0;\nconst arc_1 = __webpack_require__(/*! ./arc */ \"./src/elements/arc/arc.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nclass ArcListener {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.canvasMouseUp = (event) => {\n            const x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n            const y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n            if ((0, stateManager_1.getState)().startPoint && (0, stateManager_1.getState)().secondPoint) {\n                this.finishDrawing();\n            }\n            else if ((0, stateManager_1.getState)().startPoint) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { secondPoint: new point_1.Point(x, y) })));\n            }\n            else {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(x, y) })));\n                const arc = new arc_1.Arc().init();\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: arc })));\n            }\n        };\n        this.canvasMouseMove = (event) => {\n            this.showPositionBox(event.offsetX, event.offsetY);\n            if ((0, stateManager_1.getState)().secondPoint) {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { mousePosition: new point_1.Point(x, y) })));\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                this.showLengthInput(x, y);\n                arc_1.Arc.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, (0, stateManager_1.getState)().secondPoint.x, (0, stateManager_1.getState)().secondPoint.y, x, y);\n            }\n        };\n        this.windowKeyDown = (event) => {\n            switch (event.key) {\n                case \"Escape\":\n                    this.finishDrawing();\n                    break;\n                case \"Enter\":\n                    if ((0, stateManager_1.getState)().startPoint && (0, stateManager_1.getState)().secondPoint) {\n                        let x = (0, stateManager_1.getState)().mousePosition.x;\n                        let y = (0, stateManager_1.getState)().mousePosition.y;\n                        if ((0, stateManager_1.getState)().ortho) {\n                            if (Math.abs(x - (0, stateManager_1.getState)().startPoint.x) <\n                                Math.abs(y - (0, stateManager_1.getState)().startPoint.y)) {\n                                x = (0, stateManager_1.getState)().startPoint.x;\n                            }\n                            else {\n                                y = (0, stateManager_1.getState)().startPoint.y;\n                            }\n                        }\n                        const lengthBox = (document.getElementById(\"length-input\"));\n                        arc_1.Arc.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, (0, stateManager_1.getState)().secondPoint.x, (0, stateManager_1.getState)().secondPoint.y, x, y);\n                        this.finishDrawing();\n                    }\n                    else if ((0, stateManager_1.getState)().startPoint) {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { secondPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                    }\n                    else {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                        const arc = new arc_1.Arc().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: arc })));\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.showPositionBox = (x, y) => {\n            const positionBox = document.getElementById(\"position-box\");\n            positionBox.style.display = \"inline\";\n            document.getElementById(\"position-box\").style.left = `${x + 10}px`;\n            document.getElementById(\"position-box\").style.top = `${y + 10}px`;\n            const xInput = document.getElementById(\"x-input\");\n            const yInput = document.getElementById(\"y-input\");\n            xInput.focus();\n            xInput.select();\n            xInput.value = x.toString();\n            yInput.value = y.toString();\n        };\n        this.showLengthInput = (x, y) => {\n            const inputBox = document.getElementById(\"length-box\");\n            inputBox.style.display = \"inline\";\n            const centerPoint = new point_1.Point((x + (0, stateManager_1.getState)().startPoint.x) / 2, (y + (0, stateManager_1.getState)().startPoint.y) / 2);\n            document.getElementById(\"length-box\").style.left = `${centerPoint.x + 10}px`;\n            document.getElementById(\"length-box\").style.top = `${centerPoint.y + 10}px`;\n            const r = Math.hypot((0, stateManager_1.getState)().startPoint.x - x, (0, stateManager_1.getState)().startPoint.y - y);\n            const length = Math.round(r / 2).toString();\n            const lengthBox = document.getElementById(\"length-input\");\n            lengthBox.value = length;\n            lengthBox.focus();\n            lengthBox.select();\n        };\n    }\n    attachListenersToCanvas() {\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        window.addEventListener(\"keydown\", this.windowKeyDown);\n    }\n    finishDrawing() {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { secondPoint: null })));\n        const positionBox = document.getElementById(\"position-box\");\n        positionBox.style.display = \"none\";\n        const inputBox = document.getElementById(\"length-box\");\n        inputBox.style.display = \"none\";\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        window.removeEventListener(\"keydown\", this.windowKeyDown);\n    }\n    attachListenersToArc(element) {\n        element.addEventListener(\"mousedown\", this.elementMouseUp.bind(this));\n    }\n    elementMouseUp(event) {\n        if ((0, stateManager_1.getState)().isDrawing)\n            return null;\n        canvas_1.Canvas.unSelectAll();\n        const arc = event.currentTarget;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: arc })));\n        const startMarker = document.getElementById(\"marker_start_\" + arc.id);\n        const midMarker = document.getElementById(\"marker_mid_\" + arc.id);\n        const endMarker = document.getElementById(\"marker_end_\" + arc.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + arc.id);\n        startMarker.setAttribute(\"visibility\", \"visible\");\n        midMarker.setAttribute(\"visibility\", \"visible\");\n        endMarker.setAttribute(\"visibility\", \"visible\");\n        centerMarker.setAttribute(\"visibility\", \"visible\");\n        document\n            .getElementById(\"remove-button\")\n            .addEventListener(\"click\", this.deleteButtonClick);\n    }\n    deleteButtonClick() {\n        document\n            .getElementById(\"remove-button\")\n            .removeEventListener(\"click\", this.deleteButtonClick);\n        arc_1.Arc.remove((0, stateManager_1.getState)().selectedElement);\n    }\n}\nexports.ArcListener = ArcListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/arc/arcListener.ts?");

/***/ }),

/***/ "./src/elements/arc/markerListener.ts":
/*!********************************************!*\
  !*** ./src/elements/arc/markerListener.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkerListener = void 0;\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst arc_1 = __webpack_require__(/*! ./arc */ \"./src/elements/arc/arc.ts\");\nclass MarkerListener {\n    constructor(marker) {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.selectedMarker = null;\n        this.attachListenersToMarker = () => {\n            this.marker.addEventListener(\"mousedown\", this.markerMouseDown);\n        };\n        this.markerMouseDown = (event) => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: true })));\n            const marker = event.currentTarget;\n            const markerType = marker.id.split(\"_\")[1];\n            if (markerType === \"center\") {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: true })));\n            }\n            if (markerType === \"start\") {\n                this.selectedMarker = \"start\";\n            }\n            else if (markerType === \"mid\") {\n                this.selectedMarker = \"mid\";\n            }\n            else {\n                this.selectedMarker = \"end\";\n            }\n            this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        };\n        this.canvasMouseMove = (event) => {\n            const arcElement = (0, stateManager_1.getState)().selectedElement;\n            const startMarker = document.getElementById(\"marker_start_\" + arcElement.id);\n            const midMarker = document.getElementById(\"marker_mid_\" + arcElement.id);\n            const endMarker = document.getElementById(\"marker_end_\" + arcElement.id);\n            const x1 = parseInt(startMarker.getAttribute(\"cx\"));\n            const y1 = parseInt(startMarker.getAttribute(\"cy\"));\n            const x2 = parseInt(midMarker.getAttribute(\"cx\"));\n            const y2 = parseInt(midMarker.getAttribute(\"cy\"));\n            const x3 = parseInt(endMarker.getAttribute(\"cx\"));\n            const y3 = parseInt(endMarker.getAttribute(\"cy\"));\n            if ((0, stateManager_1.getState)().isMoving) {\n                const deltaX = event.movementX;\n                const deltaY = event.movementY;\n                arc_1.Arc.update(arcElement, x1 + deltaX, y1 + deltaY, x2 + deltaX, y2 + deltaY, x3 + deltaX, y3 + deltaY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                if (this.selectedMarker === \"start\") {\n                    arc_1.Arc.update((0, stateManager_1.getState)().selectedElement, x, y, x2, y2, x3, y3);\n                }\n                else if (this.selectedMarker === \"mid\") {\n                    arc_1.Arc.update((0, stateManager_1.getState)().selectedElement, x1, y1, x, y, x3, y3);\n                }\n                else if (this.selectedMarker === \"end\") {\n                    arc_1.Arc.update((0, stateManager_1.getState)().selectedElement, x1, y1, x2, y2, x, y);\n                }\n            }\n            this.canvas.addEventListener(\"mouseup\", this.markerMouseUp);\n        };\n        this.markerMouseUp = () => {\n            if ((0, stateManager_1.getState)().isEditing) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: false })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: false })));\n                this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n                this.canvas.removeEventListener(\"mouseup\", this.markerMouseUp);\n            }\n        };\n        this.marker = marker;\n        this.attachListenersToMarker();\n    }\n}\nexports.MarkerListener = MarkerListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/arc/markerListener.ts?");

/***/ }),

/***/ "./src/elements/arc/utility.ts":
/*!*************************************!*\
  !*** ./src/elements/arc/utility.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createArc = void 0;\nfunction createArc(x1, y1, x2, y2, x3, y3) {\n    const a = x1 - x2;\n    const b = y1 - y2;\n    const c = x1 - x3;\n    const d = y1 - y3;\n    const e = (x1 * x1 - x2 * x2 + (y1 * y1 - y2 * y2)) / 2;\n    const f = (x1 * x1 - x3 * x3 + (y1 * y1 - y3 * y3)) / 2;\n    const det = b * c - a * d;\n    const cx = (b * f - d * e) / det;\n    const cy = (c * e - a * f) / det;\n    const radius = Math.sqrt((x1 - cx) * (x1 - cx) + (y1 - cy) * (y1 - cy));\n    // Calculate the start and end angles of the arc\n    const angle1 = Math.atan2(y1 - cy, x1 - cx) * (180 / Math.PI);\n    const angle2 = Math.atan2(y3 - cy, x3 - cx) * (180 / Math.PI);\n    if (Math.abs(angle2 - angle1) <= 180 && angle2 > angle1) {\n        return {\n            d: `M ${x1},${y1} A ${radius},${radius} 0 0,1 ${x3},${y3}`,\n            cx: cx,\n            cy: cy,\n        };\n    }\n    else {\n        return null;\n    }\n}\nexports.createArc = createArc;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/arc/utility.ts?");

/***/ }),

/***/ "./src/elements/circle/circle.ts":
/*!***************************************!*\
  !*** ./src/elements/circle/circle.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Circle = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst marker_1 = __webpack_require__(/*! ../marker */ \"./src/elements/marker.ts\");\nconst circleListener_1 = __webpack_require__(/*! ./circleListener */ \"./src/elements/circle/circleListener.ts\");\nconst markerListener_1 = __webpack_require__(/*! ./markerListener */ \"./src/elements/circle/markerListener.ts\");\nclass Circle {\n    constructor(stroke = \"#FFFFFF\", strokeWidth = 1, fill = \"transparent\", opacity = 1) {\n        this.id = crypto.randomUUID();\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.fill = fill;\n        this.opacity = opacity;\n    }\n    init() {\n        const circleElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        circleElement.setAttribute(\"id\", this.id);\n        circleElement.setAttribute(\"stroke\", this.stroke);\n        circleElement.setAttribute(\"stroke-width\", this.strokeWidth.toString());\n        circleElement.setAttribute(\"fill\", this.fill);\n        circleElement.setAttribute(\"opacity\", this.opacity.toString());\n        Circle.canvas.appendChild(circleElement);\n        new circleListener_1.CircleListener().attachListenersToCircle(circleElement);\n        const rightMarker = new marker_1.Marker(`marker_right_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(rightMarker);\n        const centerMarker = new marker_1.Marker(`marker_center_${this.id}`, 4, \"green\").init();\n        new markerListener_1.MarkerListener(centerMarker);\n        return circleElement;\n    }\n    static update(circleElement, cx, cy, r) {\n        circleElement.setAttribute(\"cx\", cx.toString());\n        circleElement.setAttribute(\"cy\", cy.toString());\n        circleElement.setAttribute(\"r\", r.toString());\n        const rightMarker = document.getElementById(\"marker_right_\" + circleElement.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + circleElement.id);\n        rightMarker.setAttribute(\"cx\", (cx + r).toString());\n        rightMarker.setAttribute(\"cy\", cy.toString());\n        centerMarker.setAttribute(\"cx\", cx.toString());\n        centerMarker.setAttribute(\"cy\", cy.toString());\n        return circleElement;\n    }\n    static remove(circleElement) {\n        this.canvas.removeChild(circleElement);\n        const rightMarker = document.getElementById(\"marker_right_\" + circleElement.id);\n        this.canvas.removeChild(rightMarker);\n        const centerMarker = document.getElementById(\"marker_center_\" + circleElement.id);\n        this.canvas.removeChild(centerMarker);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n    }\n}\nexports.Circle = Circle;\nCircle.canvas = canvas_1.Canvas.getCanvasElement();\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/circle/circle.ts?");

/***/ }),

/***/ "./src/elements/circle/circleListener.ts":
/*!***********************************************!*\
  !*** ./src/elements/circle/circleListener.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CircleListener = void 0;\nconst circle_1 = __webpack_require__(/*! ./circle */ \"./src/elements/circle/circle.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nclass CircleListener {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.canvasMouseUp = (event) => {\n            const x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n            const y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n            if ((0, stateManager_1.getState)().startPoint) {\n                this.finishDrawing();\n            }\n            else {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(x, y) })));\n                const circle = new circle_1.Circle().init();\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: circle })));\n            }\n        };\n        this.canvasMouseMove = (event) => {\n            if (!(0, stateManager_1.getState)().startPoint) {\n                this.showPositionBox(event.offsetX, event.offsetY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { mousePosition: new point_1.Point(x, y) })));\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                document.getElementById(\"position-box\").style.display = \"none\";\n                this.showLengthInput(x, y);\n                const r = Math.hypot((0, stateManager_1.getState)().startPoint.x - x, (0, stateManager_1.getState)().startPoint.y - y);\n                circle_1.Circle.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, r);\n            }\n        };\n        this.windowKeyDown = (event) => {\n            switch (event.key) {\n                case \"Escape\":\n                    // Canvas.unSelectAll();\n                    this.finishDrawing();\n                    break;\n                case \"Enter\":\n                    if (!(0, stateManager_1.getState)().startPoint) {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                        const circle = new circle_1.Circle().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: circle })));\n                    }\n                    else {\n                        let x = (0, stateManager_1.getState)().mousePosition.x;\n                        let y = (0, stateManager_1.getState)().mousePosition.y;\n                        const lengthBox = (document.getElementById(\"length-input\"));\n                        const length = parseInt(lengthBox.value);\n                        circle_1.Circle.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, length);\n                        this.finishDrawing();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.showPositionBox = (x, y) => {\n            const positionBox = document.getElementById(\"position-box\");\n            positionBox.style.display = \"inline\";\n            document.getElementById(\"position-box\").style.left = `${x + 10}px`;\n            document.getElementById(\"position-box\").style.top = `${y + 10}px`;\n            const xInput = document.getElementById(\"x-input\");\n            const yInput = document.getElementById(\"y-input\");\n            xInput.focus();\n            xInput.select();\n            xInput.value = x.toString();\n            yInput.value = y.toString();\n        };\n        this.showLengthInput = (x, y) => {\n            const inputBox = document.getElementById(\"length-box\");\n            inputBox.style.display = \"inline\";\n            const centerPoint = new point_1.Point((x + (0, stateManager_1.getState)().startPoint.x) / 2, (y + (0, stateManager_1.getState)().startPoint.y) / 2);\n            document.getElementById(\"length-box\").style.left = `${centerPoint.x + 10}px`;\n            document.getElementById(\"length-box\").style.top = `${centerPoint.y + 10}px`;\n            const r = Math.hypot((0, stateManager_1.getState)().startPoint.x - x, (0, stateManager_1.getState)().startPoint.y - y);\n            const length = Math.round(r).toString();\n            const lengthBox = document.getElementById(\"length-input\");\n            lengthBox.value = length;\n            lengthBox.focus();\n            lengthBox.select();\n        };\n    }\n    attachListenersToCanvas() {\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        window.addEventListener(\"keydown\", this.windowKeyDown);\n    }\n    finishDrawing() {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: false })));\n        const positionBox = document.getElementById(\"position-box\");\n        positionBox.style.display = \"none\";\n        const inputBox = document.getElementById(\"length-box\");\n        inputBox.style.display = \"none\";\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        window.removeEventListener(\"keydown\", this.windowKeyDown);\n    }\n    attachListenersToCircle(element) {\n        element.addEventListener(\"mousedown\", this.elementMouseUp.bind(this));\n    }\n    elementMouseUp(event) {\n        if ((0, stateManager_1.getState)().startPoint)\n            return null;\n        canvas_1.Canvas.unSelectAll();\n        const circle = event.currentTarget;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: circle })));\n        const rightMarker = document.getElementById(\"marker_right_\" + circle.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + circle.id);\n        rightMarker.setAttribute(\"visibility\", \"visible\");\n        centerMarker.setAttribute(\"visibility\", \"visible\");\n        document\n            .getElementById(\"remove-button\")\n            .addEventListener(\"click\", this.deleteButtonClick);\n    }\n    deleteButtonClick() {\n        document\n            .getElementById(\"remove-button\")\n            .removeEventListener(\"click\", this.deleteButtonClick);\n        circle_1.Circle.remove((0, stateManager_1.getState)().selectedElement);\n    }\n}\nexports.CircleListener = CircleListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/circle/circleListener.ts?");

/***/ }),

/***/ "./src/elements/circle/markerListener.ts":
/*!***********************************************!*\
  !*** ./src/elements/circle/markerListener.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkerListener = void 0;\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst circle_1 = __webpack_require__(/*! ./circle */ \"./src/elements/circle/circle.ts\");\nclass MarkerListener {\n    constructor(marker) {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.attachListenersToMarker = () => {\n            this.marker.addEventListener(\"mousedown\", this.markerMouseDown);\n        };\n        this.markerMouseDown = (event) => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: true })));\n            const marker = event.currentTarget;\n            const markerType = marker.id.split(\"_\")[1];\n            if (markerType === \"center\") {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: true })));\n            }\n            this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        };\n        this.canvasMouseMove = (event) => {\n            const parentElement = (0, stateManager_1.getState)().selectedElement;\n            let cx = parseInt(parentElement.getAttribute(\"cx\"));\n            let cy = parseInt(parentElement.getAttribute(\"cy\"));\n            let r = parseInt(parentElement.getAttribute(\"r\"));\n            if ((0, stateManager_1.getState)().isMoving) {\n                const deltaX = event.movementX;\n                const deltaY = event.movementY;\n                circle_1.Circle.update(parentElement, cx + deltaX, cy + deltaY, r);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                const r = Math.hypot(cx - x, cy - y);\n                circle_1.Circle.update((0, stateManager_1.getState)().selectedElement, cx, cy, r);\n            }\n            this.canvas.addEventListener(\"mouseup\", this.markerMouseUp);\n        };\n        this.markerMouseUp = () => {\n            if ((0, stateManager_1.getState)().isEditing) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: false })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: false })));\n                this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n                this.canvas.removeEventListener(\"mouseup\", this.markerMouseUp);\n            }\n        };\n        this.marker = marker;\n        this.attachListenersToMarker();\n    }\n}\nexports.MarkerListener = MarkerListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/circle/markerListener.ts?");

/***/ }),

/***/ "./src/elements/line/line.ts":
/*!***********************************!*\
  !*** ./src/elements/line/line.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Line = void 0;\nconst marker_1 = __webpack_require__(/*! ../marker */ \"./src/elements/marker.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst markerListener_1 = __webpack_require__(/*! ./markerListener */ \"./src/elements/line/markerListener.ts\");\nconst utility_1 = __webpack_require__(/*! ./utility */ \"./src/elements/line/utility.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst lineListener_1 = __webpack_require__(/*! ./lineListener */ \"./src/elements/line/lineListener.ts\");\nclass Line {\n    constructor(stroke = \"#FFFFFF\", strokeWidth = 1, opacity = 1) {\n        this.id = crypto.randomUUID();\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.opacity = opacity;\n    }\n    init() {\n        const lineElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        lineElement.setAttribute(\"id\", this.id);\n        lineElement.setAttribute(\"stroke\", this.stroke);\n        lineElement.setAttribute(\"stroke-width\", this.strokeWidth.toString());\n        lineElement.setAttribute(\"opacity\", this.opacity.toString());\n        Line.canvas.appendChild(lineElement);\n        new lineListener_1.LineListener().attachListenersToLine(lineElement);\n        const startMarker = new marker_1.Marker(`marker_start_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(startMarker);\n        const endMarker = new marker_1.Marker(`marker_end_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(endMarker);\n        const centerMarker = new marker_1.Marker(`marker_center_${this.id}`, 4, \"green\").init();\n        new markerListener_1.MarkerListener(centerMarker);\n        return lineElement;\n    }\n    static update(lineElement, x1, y1, x2, y2) {\n        lineElement.setAttribute(\"x1\", x1.toString());\n        lineElement.setAttribute(\"y1\", y1.toString());\n        lineElement.setAttribute(\"x2\", x2.toString());\n        lineElement.setAttribute(\"y2\", y2.toString());\n        const startMarker = document.getElementById(\"marker_start_\" + lineElement.id);\n        const endMarker = document.getElementById(\"marker_end_\" + lineElement.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + lineElement.id);\n        startMarker.setAttribute(\"cx\", x1.toString());\n        startMarker.setAttribute(\"cy\", y1.toString());\n        endMarker.setAttribute(\"cx\", x2.toString());\n        endMarker.setAttribute(\"cy\", y2.toString());\n        const centerPoint = (0, utility_1.calculateCenterPoint)(x1, y1, x2, y2);\n        centerMarker.setAttribute(\"cx\", centerPoint.x.toString());\n        centerMarker.setAttribute(\"cy\", centerPoint.y.toString());\n        return lineElement;\n    }\n    static remove(lineElement) {\n        this.canvas.removeChild(lineElement);\n        const startMarker = document.getElementById(\"marker_start_\" + lineElement.id);\n        this.canvas.removeChild(startMarker);\n        const endMarker = document.getElementById(\"marker_end_\" + lineElement.id);\n        this.canvas.removeChild(endMarker);\n        const centerMarker = document.getElementById(\"marker_center_\" + lineElement.id);\n        this.canvas.removeChild(centerMarker);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n    }\n}\nexports.Line = Line;\nLine.canvas = canvas_1.Canvas.getCanvasElement();\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/line/line.ts?");

/***/ }),

/***/ "./src/elements/line/lineListener.ts":
/*!*******************************************!*\
  !*** ./src/elements/line/lineListener.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LineListener = void 0;\nconst line_1 = __webpack_require__(/*! ./line */ \"./src/elements/line/line.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nconst utility_2 = __webpack_require__(/*! ./utility */ \"./src/elements/line/utility.ts\");\nclass LineListener {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.canvasMouseUp = (event) => {\n            const x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n            const y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(x, y) })));\n            const line = new line_1.Line((0, stateManager_1.getState)().stroke, (0, stateManager_1.getState)().strokeWidth, (0, stateManager_1.getState)().opacity).init();\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: line })));\n        };\n        this.canvasMouseMove = (event) => {\n            if (!(0, stateManager_1.getState)().isDrawing) {\n                this.showPositionBox(event.offsetX, event.offsetY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { mousePosition: new point_1.Point(x, y) })));\n                if ((0, stateManager_1.getState)().ortho) {\n                    if (Math.abs(event.offsetX - (0, stateManager_1.getState)().startPoint.x) <\n                        Math.abs(event.offsetY - (0, stateManager_1.getState)().startPoint.y)) {\n                        x = (0, stateManager_1.getState)().startPoint.x;\n                    }\n                    else {\n                        y = (0, stateManager_1.getState)().startPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                document.getElementById(\"position-box\").style.display = \"none\";\n                this.showLengthInput(x, y);\n                line_1.Line.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, x, y);\n            }\n        };\n        this.windowKeyDown = (event) => {\n            switch (event.key) {\n                case \"Escape\":\n                    // Canvas.unSelectAll();\n                    this.finishDrawing();\n                    break;\n                case \"Enter\":\n                    if (!(0, stateManager_1.getState)().isDrawing) {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                        const line = new line_1.Line().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: line })));\n                    }\n                    else {\n                        const lengthBox = (document.getElementById(\"length-input\"));\n                        const length = parseInt(lengthBox.value);\n                        let x = (0, stateManager_1.getState)().mousePosition.x;\n                        let y = (0, stateManager_1.getState)().mousePosition.y;\n                        if ((0, stateManager_1.getState)().ortho) {\n                            if (Math.abs(x - (0, stateManager_1.getState)().startPoint.x) <\n                                Math.abs(y - (0, stateManager_1.getState)().startPoint.y)) {\n                                x = (0, stateManager_1.getState)().startPoint.x;\n                            }\n                            else {\n                                y = (0, stateManager_1.getState)().startPoint.y;\n                            }\n                        }\n                        const endpoint = (0, utility_2.calculateEndpoint)((0, stateManager_1.getState)().startPoint, length, new point_1.Point(x, y));\n                        line_1.Line.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, endpoint.x, endpoint.y);\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(endpoint.x, endpoint.y) })));\n                        const line = new line_1.Line().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: line })));\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.showPositionBox = (x, y) => {\n            const positionBox = document.getElementById(\"position-box\");\n            positionBox.style.display = \"inline\";\n            document.getElementById(\"position-box\").style.left = `${x + 10}px`;\n            document.getElementById(\"position-box\").style.top = `${y + 10}px`;\n            const xInput = document.getElementById(\"x-input\");\n            const yInput = document.getElementById(\"y-input\");\n            xInput.focus();\n            xInput.select();\n            xInput.value = x.toString();\n            yInput.value = y.toString();\n        };\n        this.showLengthInput = (x, y) => {\n            const inputBox = document.getElementById(\"length-box\");\n            inputBox.style.display = \"inline\";\n            const centerPoint = new point_1.Point((x + (0, stateManager_1.getState)().startPoint.x) / 2, (y + (0, stateManager_1.getState)().startPoint.y) / 2);\n            document.getElementById(\"length-box\").style.left = `${centerPoint.x + 10}px`;\n            document.getElementById(\"length-box\").style.top = `${centerPoint.y + 10}px`;\n            const length = (0, utility_2.lineLength)((0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, x, y).toString();\n            const lengthBox = document.getElementById(\"length-input\");\n            lengthBox.value = length;\n            lengthBox.focus();\n            lengthBox.select();\n        };\n    }\n    attachListenersToCanvas() {\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        window.addEventListener(\"keydown\", this.windowKeyDown);\n    }\n    finishDrawing() {\n        line_1.Line.remove((0, stateManager_1.getState)().selectedElement);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: false })));\n        const positionBox = document.getElementById(\"position-box\");\n        positionBox.style.display = \"none\";\n        const inputBox = document.getElementById(\"length-box\");\n        inputBox.style.display = \"none\";\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        window.removeEventListener(\"keydown\", this.windowKeyDown);\n    }\n    attachListenersToLine(element) {\n        element.addEventListener(\"click\", this.elementMouseClick.bind(this));\n    }\n    elementMouseClick(event) {\n        if ((0, stateManager_1.getState)().isDrawing)\n            return null;\n        canvas_1.Canvas.unSelectAll();\n        const line = event.currentTarget;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: line })));\n        const startMarker = document.getElementById(\"marker_start_\" + line.id);\n        const endMarker = document.getElementById(\"marker_end_\" + line.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + line.id);\n        startMarker.setAttribute(\"visibility\", \"visible\");\n        endMarker.setAttribute(\"visibility\", \"visible\");\n        centerMarker.setAttribute(\"visibility\", \"visible\");\n        document\n            .getElementById(\"remove-button\")\n            .addEventListener(\"click\", this.deleteButtonClick);\n    }\n    deleteButtonClick() {\n        document\n            .getElementById(\"remove-button\")\n            .removeEventListener(\"click\", this.deleteButtonClick);\n        line_1.Line.remove((0, stateManager_1.getState)().selectedElement);\n    }\n}\nexports.LineListener = LineListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/line/lineListener.ts?");

/***/ }),

/***/ "./src/elements/line/markerListener.ts":
/*!*********************************************!*\
  !*** ./src/elements/line/markerListener.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkerListener = void 0;\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nconst line_1 = __webpack_require__(/*! ./line */ \"./src/elements/line/line.ts\");\nclass MarkerListener {\n    constructor(marker) {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.attachListenersToMarker = () => {\n            this.marker.addEventListener(\"mousedown\", this.markerMouseDown);\n            this.marker.addEventListener(\"mouseup\", this.markerMouseUp);\n        };\n        this.markerMouseDown = (event) => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: true })));\n            const marker = event.currentTarget;\n            const parentElement = document.getElementById(marker.id.split(\"_\")[2]);\n            let x1 = parentElement.getAttribute(\"x1\");\n            let y1 = parentElement.getAttribute(\"y1\");\n            let x2 = parentElement.getAttribute(\"x2\");\n            let y2 = parentElement.getAttribute(\"y2\");\n            let cx = marker.getAttribute(\"cx\");\n            let cy = marker.getAttribute(\"cy\");\n            const markerType = marker.id.split(\"_\")[1];\n            if (markerType === \"center\") {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: true })));\n            }\n            else {\n                if (cx === x1 && cy === y1) {\n                    (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(x2), parseInt(y2)) })));\n                }\n                else {\n                    (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(x1), parseInt(y1)) })));\n                }\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: parentElement })));\n            }\n            this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        };\n        this.canvasMouseMove = (event) => {\n            if ((0, stateManager_1.getState)().isMoving) {\n                const deltaX = event.movementX;\n                const deltaY = event.movementY;\n                const parentElement = (0, stateManager_1.getState)().selectedElement;\n                let x1 = parseInt(parentElement.getAttribute(\"x1\"));\n                let y1 = parseInt(parentElement.getAttribute(\"y1\"));\n                let x2 = parseInt(parentElement.getAttribute(\"x2\"));\n                let y2 = parseInt(parentElement.getAttribute(\"y2\"));\n                line_1.Line.update(parentElement, x1 + deltaX, y1 + deltaY, x2 + deltaX, y2 + deltaY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                if ((0, stateManager_1.getState)().ortho) {\n                    if (Math.abs(event.offsetX - (0, stateManager_1.getState)().startPoint.x) <\n                        Math.abs(event.offsetY - (0, stateManager_1.getState)().startPoint.y)) {\n                        x = (0, stateManager_1.getState)().startPoint.x;\n                    }\n                    else {\n                        y = (0, stateManager_1.getState)().startPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().startPoint) {\n                    line_1.Line.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, x, y);\n                }\n            }\n        };\n        this.markerMouseUp = () => {\n            if ((0, stateManager_1.getState)().isEditing) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: false })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: false })));\n                const canvas = document.getElementById(\"canvas\");\n                canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n            }\n        };\n        this.marker = marker;\n        this.attachListenersToMarker();\n    }\n}\nexports.MarkerListener = MarkerListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/line/markerListener.ts?");

/***/ }),

/***/ "./src/elements/line/utility.ts":
/*!**************************************!*\
  !*** ./src/elements/line/utility.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.calculateCenterPoint = exports.calculateEndpoint = exports.lineLength = void 0;\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nfunction lineLength(x1, y1, x2, y2) {\n    return Math.round(Math.hypot(x2 - x1, y2 - y1));\n}\nexports.lineLength = lineLength;\nconst calculateEndpoint = (startPoint, length, mousePosition) => {\n    // Calculate the difference between the mouse position and the start point\n    const dx = mousePosition.x - startPoint.x;\n    const dy = mousePosition.y - startPoint.y;\n    // Calculate the angle of the line using arctangent\n    const angle = Math.atan2(dy, dx);\n    // Calculate the new x and y coordinates of the endpoint using trigonometry\n    const endX = startPoint.x + length * Math.cos(angle);\n    const endY = startPoint.y + length * Math.sin(angle);\n    return new point_1.Point(Math.round(endX), Math.round(endY));\n};\nexports.calculateEndpoint = calculateEndpoint;\nconst calculateCenterPoint = (x1, y1, x2, y2) => {\n    return new point_1.Point((x1 + x2) / 2, (y1 + y2) / 2);\n};\nexports.calculateCenterPoint = calculateCenterPoint;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/line/utility.ts?");

/***/ }),

/***/ "./src/elements/marker.ts":
/*!********************************!*\
  !*** ./src/elements/marker.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Marker = void 0;\nconst canvas_1 = __webpack_require__(/*! ../canvas */ \"./src/canvas/index.ts\");\nclass Marker {\n    constructor(id, radius = 4, fill = \"#00E1FF\") {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.id = id;\n        this.radius = radius;\n        this.fill = fill;\n    }\n    init() {\n        const marker = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n        marker.setAttribute(\"id\", this.id);\n        marker.setAttribute(\"r\", this.radius.toString());\n        marker.setAttribute(\"stroke\", \"none\");\n        marker.setAttribute(\"fill\", this.fill);\n        marker.setAttribute(\"visibility\", \"hidden\");\n        this.canvas.appendChild(marker);\n        return marker;\n    }\n}\nexports.Marker = Marker;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/marker.ts?");

/***/ }),

/***/ "./src/elements/point.ts":
/*!*******************************!*\
  !*** ./src/elements/point.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Point = void 0;\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nexports.Point = Point;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/point.ts?");

/***/ }),

/***/ "./src/elements/rectangle/markerListener.ts":
/*!**************************************************!*\
  !*** ./src/elements/rectangle/markerListener.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkerListener = void 0;\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./src/elements/rectangle/rectangle.ts\");\nclass MarkerListener {\n    constructor(marker) {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.attachListenersToMarker = () => {\n            this.marker.addEventListener(\"mousedown\", this.markerMouseDown);\n        };\n        this.markerMouseDown = (event) => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: true })));\n            const marker = event.currentTarget;\n            const markerType = marker.id.split(\"_\")[1];\n            if (markerType === \"center\") {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: true })));\n            }\n            this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        };\n        this.canvasMouseMove = (event) => {\n            const parentElement = (0, stateManager_1.getState)().selectedElement;\n            let startX = parseInt(parentElement.getAttribute(\"x\"));\n            let startY = parseInt(parentElement.getAttribute(\"y\"));\n            let width = parseInt(parentElement.getAttribute(\"width\"));\n            let height = parseInt(parentElement.getAttribute(\"height\"));\n            if ((0, stateManager_1.getState)().isMoving) {\n                const deltaX = event.movementX;\n                const deltaY = event.movementY;\n                rectangle_1.Rectangle.update(parentElement, startX + deltaX, startY + deltaY, width, height);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                if ((0, stateManager_1.getState)().ortho) {\n                    if (Math.abs(event.offsetX - (0, stateManager_1.getState)().startPoint.x) <\n                        Math.abs(event.offsetY - (0, stateManager_1.getState)().startPoint.y)) {\n                        x = (0, stateManager_1.getState)().startPoint.x;\n                    }\n                    else {\n                        y = (0, stateManager_1.getState)().startPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                const width = Math.abs(startX - x);\n                const height = Math.abs(startY - y);\n                rectangle_1.Rectangle.update((0, stateManager_1.getState)().selectedElement, startX, startY, width, height);\n            }\n            this.canvas.addEventListener(\"mouseup\", this.markerMouseUp);\n        };\n        this.markerMouseUp = () => {\n            if ((0, stateManager_1.getState)().isEditing) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: false })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: false })));\n                this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n                this.canvas.removeEventListener(\"mouseup\", this.markerMouseUp);\n            }\n        };\n        this.marker = marker;\n        this.attachListenersToMarker();\n    }\n}\nexports.MarkerListener = MarkerListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/rectangle/markerListener.ts?");

/***/ }),

/***/ "./src/elements/rectangle/rectangle.ts":
/*!*********************************************!*\
  !*** ./src/elements/rectangle/rectangle.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Rectangle = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst marker_1 = __webpack_require__(/*! ../marker */ \"./src/elements/marker.ts\");\nconst rectangleListener_1 = __webpack_require__(/*! ./rectangleListener */ \"./src/elements/rectangle/rectangleListener.ts\");\nconst markerListener_1 = __webpack_require__(/*! ./markerListener */ \"./src/elements/rectangle/markerListener.ts\");\nclass Rectangle {\n    constructor(stroke = \"#FFFFFF\", strokeWidth = 1, fill = \"transparent\", opacity = 1) {\n        this.id = crypto.randomUUID();\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.fill = fill;\n        this.opacity = opacity;\n    }\n    init() {\n        const rectangleElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        rectangleElement.setAttribute(\"id\", this.id);\n        rectangleElement.setAttribute(\"stroke\", this.stroke);\n        rectangleElement.setAttribute(\"stroke-width\", this.strokeWidth.toString());\n        rectangleElement.setAttribute(\"fill\", this.fill);\n        rectangleElement.setAttribute(\"opacity\", this.opacity.toString());\n        Rectangle.canvas.appendChild(rectangleElement);\n        new rectangleListener_1.RectangleListener().attachListenersToRectangle(rectangleElement);\n        const rightMarker = new marker_1.Marker(`marker_right_${this.id}`, 4, \"blue\").init();\n        new markerListener_1.MarkerListener(rightMarker);\n        const centerMarker = new marker_1.Marker(`marker_center_${this.id}`, 4, \"green\").init();\n        new markerListener_1.MarkerListener(centerMarker);\n        return rectangleElement;\n    }\n    static update(rectangleElement, x, y, width, height) {\n        rectangleElement.setAttribute(\"x\", x.toString());\n        rectangleElement.setAttribute(\"y\", y.toString());\n        rectangleElement.setAttribute(\"width\", width.toString());\n        rectangleElement.setAttribute(\"height\", height.toString());\n        const rightMarker = document.getElementById(\"marker_right_\" + rectangleElement.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + rectangleElement.id);\n        rightMarker.setAttribute(\"cx\", (x + width).toString());\n        rightMarker.setAttribute(\"cy\", (y + height).toString());\n        centerMarker.setAttribute(\"cx\", x.toString());\n        centerMarker.setAttribute(\"cy\", y.toString());\n        return rectangleElement;\n    }\n    static remove(rectangleElement) {\n        this.canvas.removeChild(rectangleElement);\n        const rightMarker = document.getElementById(\"marker_right_\" + rectangleElement.id);\n        this.canvas.removeChild(rightMarker);\n        const centerMarker = document.getElementById(\"marker_center_\" + rectangleElement.id);\n        this.canvas.removeChild(centerMarker);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n    }\n}\nexports.Rectangle = Rectangle;\nRectangle.canvas = canvas_1.Canvas.getCanvasElement();\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/rectangle/rectangle.ts?");

/***/ }),

/***/ "./src/elements/rectangle/rectangleListener.ts":
/*!*****************************************************!*\
  !*** ./src/elements/rectangle/rectangleListener.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RectangleListener = void 0;\nconst rectangle_1 = __webpack_require__(/*! ./rectangle */ \"./src/elements/rectangle/rectangle.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nclass RectangleListener {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.canvasMouseUp = (event) => {\n            const x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n            const y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n            if ((0, stateManager_1.getState)().isDrawing) {\n                this.finishDrawing();\n            }\n            else {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(x, y) })));\n                const rectangle = new rectangle_1.Rectangle().init();\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: rectangle })));\n            }\n        };\n        this.canvasMouseMove = (event) => {\n            if (!(0, stateManager_1.getState)().isDrawing) {\n                this.showPositionBox(event.offsetX, event.offsetY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { mousePosition: new point_1.Point(x, y) })));\n                if ((0, stateManager_1.getState)().ortho) {\n                    if (Math.abs(event.offsetX - (0, stateManager_1.getState)().startPoint.x) <\n                        Math.abs(event.offsetY - (0, stateManager_1.getState)().startPoint.y)) {\n                        x = (0, stateManager_1.getState)().startPoint.x;\n                    }\n                    else {\n                        y = (0, stateManager_1.getState)().startPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                document.getElementById(\"position-box\").style.display = \"none\";\n                this.showLengthInput(x, y);\n                const width = Math.abs((0, stateManager_1.getState)().startPoint.x - x);\n                const height = Math.abs((0, stateManager_1.getState)().startPoint.y - y);\n                rectangle_1.Rectangle.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, width, height);\n            }\n        };\n        this.windowKeyDown = (event) => {\n            switch (event.key) {\n                case \"Escape\":\n                    // Canvas.unSelectAll();\n                    this.finishDrawing();\n                    break;\n                case \"Enter\":\n                    if (!(0, stateManager_1.getState)().isDrawing) {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                        const rectangle = new rectangle_1.Rectangle().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: rectangle })));\n                    }\n                    else {\n                        let x = (0, stateManager_1.getState)().mousePosition.x;\n                        let y = (0, stateManager_1.getState)().mousePosition.y;\n                        if ((0, stateManager_1.getState)().ortho) {\n                            if (Math.abs(x - (0, stateManager_1.getState)().startPoint.x) <\n                                Math.abs(y - (0, stateManager_1.getState)().startPoint.y)) {\n                                x = (0, stateManager_1.getState)().startPoint.x;\n                            }\n                            else {\n                                y = (0, stateManager_1.getState)().startPoint.y;\n                            }\n                        }\n                        const lengthBox = (document.getElementById(\"length-input\"));\n                        const length = parseInt(lengthBox.value);\n                        const width = Math.abs((0, stateManager_1.getState)().startPoint.x - x);\n                        const height = Math.abs((0, stateManager_1.getState)().startPoint.y - y);\n                        rectangle_1.Rectangle.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y, width, height);\n                        this.finishDrawing();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.showPositionBox = (x, y) => {\n            const positionBox = document.getElementById(\"position-box\");\n            positionBox.style.display = \"inline\";\n            document.getElementById(\"position-box\").style.left = `${x + 10}px`;\n            document.getElementById(\"position-box\").style.top = `${y + 10}px`;\n            const xInput = document.getElementById(\"x-input\");\n            const yInput = document.getElementById(\"y-input\");\n            xInput.focus();\n            xInput.select();\n            xInput.value = x.toString();\n            yInput.value = y.toString();\n        };\n        this.showLengthInput = (x, y) => {\n            const inputBox = document.getElementById(\"length-box\");\n            inputBox.style.display = \"inline\";\n            const centerPoint = new point_1.Point((x + (0, stateManager_1.getState)().startPoint.x) / 2, (y + (0, stateManager_1.getState)().startPoint.y) / 2);\n            document.getElementById(\"length-box\").style.left = `${centerPoint.x + 10}px`;\n            document.getElementById(\"length-box\").style.top = `${centerPoint.y + 10}px`;\n            const r = Math.hypot((0, stateManager_1.getState)().startPoint.x - x, (0, stateManager_1.getState)().startPoint.y - y);\n            const length = Math.round(r).toString();\n            const lengthBox = document.getElementById(\"length-input\");\n            lengthBox.value = length;\n            lengthBox.focus();\n            lengthBox.select();\n        };\n    }\n    attachListenersToCanvas() {\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        window.addEventListener(\"keydown\", this.windowKeyDown);\n    }\n    finishDrawing() {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: false })));\n        const positionBox = document.getElementById(\"position-box\");\n        positionBox.style.display = \"none\";\n        const inputBox = document.getElementById(\"length-box\");\n        inputBox.style.display = \"none\";\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        window.removeEventListener(\"keydown\", this.windowKeyDown);\n    }\n    attachListenersToRectangle(element) {\n        element.addEventListener(\"mousedown\", this.elementMouseUp.bind(this));\n    }\n    elementMouseUp(event) {\n        if ((0, stateManager_1.getState)().isDrawing)\n            return null;\n        canvas_1.Canvas.unSelectAll();\n        const rectangle = event.currentTarget;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: rectangle })));\n        const rightMarker = document.getElementById(\"marker_right_\" + rectangle.id);\n        const centerMarker = document.getElementById(\"marker_center_\" + rectangle.id);\n        rightMarker.setAttribute(\"visibility\", \"visible\");\n        centerMarker.setAttribute(\"visibility\", \"visible\");\n        document\n            .getElementById(\"remove-button\")\n            .addEventListener(\"click\", this.deleteButtonClick);\n    }\n    deleteButtonClick() {\n        document\n            .getElementById(\"remove-button\")\n            .removeEventListener(\"click\", this.deleteButtonClick);\n        rectangle_1.Rectangle.remove((0, stateManager_1.getState)().selectedElement);\n    }\n}\nexports.RectangleListener = RectangleListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/rectangle/rectangleListener.ts?");

/***/ }),

/***/ "./src/elements/text/markerListener.ts":
/*!*********************************************!*\
  !*** ./src/elements/text/markerListener.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkerListener = void 0;\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst text_1 = __webpack_require__(/*! ./text */ \"./src/elements/text/text.ts\");\nclass MarkerListener {\n    constructor(marker) {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.attachListenersToMarker = () => {\n            this.marker.addEventListener(\"mousedown\", this.markerMouseDown);\n        };\n        this.markerMouseDown = (event) => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: true })));\n            const marker = event.currentTarget;\n            const markerType = marker.id.split(\"_\")[1];\n            if (markerType === \"center\") {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: true })));\n            }\n            this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        };\n        this.canvasMouseMove = (event) => {\n            const parentElement = (0, stateManager_1.getState)().selectedElement;\n            let startX = parseInt(parentElement.getAttribute(\"x\"));\n            let startY = parseInt(parentElement.getAttribute(\"y\"));\n            let width = parseInt(parentElement.getAttribute(\"width\"));\n            let height = parseInt(parentElement.getAttribute(\"height\"));\n            if ((0, stateManager_1.getState)().isMoving) {\n                const deltaX = event.movementX;\n                const deltaY = event.movementY;\n                text_1.Text.update(parentElement, startX + deltaX, startY + deltaY);\n            }\n            else {\n                let x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n                let y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n                if ((0, stateManager_1.getState)().ortho) {\n                    if (Math.abs(event.offsetX - (0, stateManager_1.getState)().startPoint.x) <\n                        Math.abs(event.offsetY - (0, stateManager_1.getState)().startPoint.y)) {\n                        x = (0, stateManager_1.getState)().startPoint.x;\n                    }\n                    else {\n                        y = (0, stateManager_1.getState)().startPoint.y;\n                    }\n                }\n                if ((0, stateManager_1.getState)().oSnap) {\n                    const targetPoint = (0, utility_1.oSnap)(event.offsetX, event.offsetY);\n                    if (targetPoint) {\n                        x = targetPoint.x;\n                        y = targetPoint.y;\n                    }\n                }\n                const width = Math.abs(startX - x);\n                const height = Math.abs(startY - y);\n                text_1.Text.update((0, stateManager_1.getState)().selectedElement, startX, startY);\n            }\n            this.canvas.addEventListener(\"mouseup\", this.markerMouseUp);\n        };\n        this.markerMouseUp = () => {\n            if ((0, stateManager_1.getState)().isEditing) {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isMoving: false })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isEditing: false })));\n                this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n                this.canvas.removeEventListener(\"mouseup\", this.markerMouseUp);\n            }\n        };\n        this.marker = marker;\n        this.attachListenersToMarker();\n    }\n}\nexports.MarkerListener = MarkerListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/text/markerListener.ts?");

/***/ }),

/***/ "./src/elements/text/text.ts":
/*!***********************************!*\
  !*** ./src/elements/text/text.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Text = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst marker_1 = __webpack_require__(/*! ../marker */ \"./src/elements/marker.ts\");\nconst textListener_1 = __webpack_require__(/*! ./textListener */ \"./src/elements/text/textListener.ts\");\nconst markerListener_1 = __webpack_require__(/*! ./markerListener */ \"./src/elements/text/markerListener.ts\");\nclass Text {\n    constructor(fontSize = 24, fill = \"white\", stroke = \"blue\", strokeWidth = 0) {\n        this.id = crypto.randomUUID();\n        this.fontSize = fontSize;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    init() {\n        const textElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        textElement.setAttribute(\"id\", this.id);\n        textElement.setAttribute(\"font-size\", this.fontSize.toString());\n        textElement.setAttribute(\"fill\", this.fill);\n        textElement.setAttribute(\"stroke\", this.stroke);\n        textElement.setAttribute(\"stroke-width\", this.strokeWidth.toString());\n        Text.canvas.appendChild(textElement);\n        new textListener_1.TextListener().attachListenersToText(textElement);\n        const centerMarker = new marker_1.Marker(`marker_center_${this.id}`, 4, \"green\").init();\n        new markerListener_1.MarkerListener(centerMarker);\n        return textElement;\n    }\n    static update(textElement, x, y) {\n        textElement.setAttribute(\"x\", x.toString());\n        textElement.setAttribute(\"y\", y.toString());\n        const centerMarker = document.getElementById(\"marker_center_\" + textElement.id);\n        centerMarker.setAttribute(\"cx\", (x - 5).toString());\n        centerMarker.setAttribute(\"cy\", (y + 5).toString());\n        return textElement;\n    }\n    static remove(textElement) {\n        this.canvas.removeChild(textElement);\n        const centerMarker = document.getElementById(\"marker_center_\" + textElement.id);\n        this.canvas.removeChild(centerMarker);\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n    }\n}\nexports.Text = Text;\nText.canvas = canvas_1.Canvas.getCanvasElement();\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/text/text.ts?");

/***/ }),

/***/ "./src/elements/text/textListener.ts":
/*!*******************************************!*\
  !*** ./src/elements/text/textListener.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextListener = void 0;\nconst text_1 = __webpack_require__(/*! ./text */ \"./src/elements/text/text.ts\");\nconst canvas_1 = __webpack_require__(/*! ../../canvas */ \"./src/canvas/index.ts\");\nconst stateManager_1 = __webpack_require__(/*! ../../stateManager */ \"./src/stateManager.ts\");\nconst utility_1 = __webpack_require__(/*! ../../utility */ \"./src/utility.ts\");\nconst point_1 = __webpack_require__(/*! ../point */ \"./src/elements/point.ts\");\nclass TextListener {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.canvasMouseUp = (event) => {\n            const x = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).x;\n            const y = (0, utility_1.toSvgPoint)(this.canvas, event.offsetX, event.offsetY).y;\n            if ((0, stateManager_1.getState)().isDrawing) {\n                this.finishDrawing();\n            }\n            else {\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(x, y) })));\n                const text = new text_1.Text().init();\n                this.showTextInput(x, y);\n                document.getElementById(\"position-box\").style.display = \"none\";\n                (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: text })));\n            }\n        };\n        this.canvasMouseMove = (event) => {\n            if (!(0, stateManager_1.getState)().isDrawing) {\n                this.showPositionBox(event.offsetX, event.offsetY);\n            }\n        };\n        this.windowKeyDown = (event) => {\n            switch (event.key) {\n                case \"Escape\":\n                    // Canvas.unSelectAll();\n                    this.finishDrawing();\n                    break;\n                case \"Enter\":\n                    if (!(0, stateManager_1.getState)().isDrawing) {\n                        const xInput = document.getElementById(\"x-input\");\n                        const yInput = document.getElementById(\"y-input\");\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: true })));\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: new point_1.Point(parseInt(xInput.value), parseInt(yInput.value)) })));\n                        const text = new text_1.Text().init();\n                        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: text })));\n                    }\n                    else {\n                        const textBox = (document.getElementById(\"text-input\"));\n                        const text = textBox.value;\n                        (0, stateManager_1.getState)().selectedElement.textContent = text;\n                        text_1.Text.update((0, stateManager_1.getState)().selectedElement, (0, stateManager_1.getState)().startPoint.x, (0, stateManager_1.getState)().startPoint.y);\n                        this.finishDrawing();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.showPositionBox = (x, y) => {\n            const positionBox = document.getElementById(\"position-box\");\n            positionBox.style.display = \"inline\";\n            document.getElementById(\"position-box\").style.left = `${x + 10}px`;\n            document.getElementById(\"position-box\").style.top = `${y + 10}px`;\n            const xInput = document.getElementById(\"x-input\");\n            const yInput = document.getElementById(\"y-input\");\n            xInput.focus();\n            xInput.select();\n            xInput.value = x.toString();\n            yInput.value = y.toString();\n        };\n        this.showTextInput = (x, y) => {\n            const inputBox = document.getElementById(\"text-box\");\n            inputBox.style.display = \"inline\";\n            document.getElementById(\"text-box\").style.left = `${x}px`;\n            document.getElementById(\"text-box\").style.top = `${y}px`;\n            const textBox = document.getElementById(\"text-input\");\n            textBox.focus();\n            textBox.select();\n        };\n    }\n    attachListenersToCanvas() {\n        this.canvas.addEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.addEventListener(\"mousemove\", this.canvasMouseMove);\n        window.addEventListener(\"keydown\", this.windowKeyDown);\n    }\n    finishDrawing() {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { startPoint: null })));\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { isDrawing: false })));\n        const positionBox = document.getElementById(\"position-box\");\n        positionBox.style.display = \"none\";\n        const inputBox = document.getElementById(\"text-box\");\n        inputBox.style.display = \"none\";\n        this.canvas.removeEventListener(\"mouseup\", this.canvasMouseUp);\n        this.canvas.removeEventListener(\"mousemove\", this.canvasMouseMove);\n        window.removeEventListener(\"keydown\", this.windowKeyDown);\n    }\n    attachListenersToText(element) {\n        element.addEventListener(\"mousedown\", this.elementMouseUp.bind(this));\n    }\n    elementMouseUp(event) {\n        if ((0, stateManager_1.getState)().isDrawing)\n            return null;\n        canvas_1.Canvas.unSelectAll();\n        const text = event.currentTarget;\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { selectedElement: text })));\n        text.setAttribute(\"stroke\", \"blue\");\n        const centerMarker = document.getElementById(\"marker_center_\" + text.id);\n        centerMarker.setAttribute(\"visibility\", \"visible\");\n        document\n            .getElementById(\"remove-button\")\n            .addEventListener(\"click\", this.deleteButtonClick);\n    }\n    deleteButtonClick() {\n        document\n            .getElementById(\"remove-button\")\n            .removeEventListener(\"click\", this.deleteButtonClick);\n        text_1.Text.remove((0, stateManager_1.getState)().selectedElement);\n    }\n}\nexports.TextListener = TextListener;\n\n\n//# sourceURL=webpack://LibreDraft/./src/elements/text/textListener.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst canvas_1 = __webpack_require__(/*! ./canvas */ \"./src/canvas/index.ts\");\nconst ui_1 = __webpack_require__(/*! ./ui */ \"./src/ui/index.ts\");\nconst applicationBar_1 = __webpack_require__(/*! ./ui/applicationBar */ \"./src/ui/applicationBar.ts\");\nconst canvasElement = canvas_1.Canvas.getCanvasElement();\nnew applicationBar_1.ApplicationBar();\nnew ui_1.DrawingPanel(canvasElement);\nnew ui_1.EditingPanel();\nnew canvas_1.CanvasContainer();\nnew canvas_1.Canvas();\nnew ui_1.StatusBar();\n\n\n//# sourceURL=webpack://LibreDraft/./src/index.ts?");

/***/ }),

/***/ "./src/stateManager.ts":
/*!*****************************!*\
  !*** ./src/stateManager.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.subscribe = exports.setState = exports.getState = void 0;\nlet initialState = {\n    oSnap: false,\n    ortho: false,\n    selectedElement: null,\n    selectedDrawing: null,\n    selectedAction: null,\n    isDrawing: false,\n    isEditing: false,\n    isMoving: false,\n    startPoint: null,\n    secondPoint: null,\n    mousePosition: null,\n    zoom: 1,\n    stroke: \"white\",\n    strokeWidth: 1,\n    fill: \"transparent\",\n    opacity: 1,\n    fontSize: 14,\n};\nlet subscribers = [];\nfunction getState() {\n    return initialState;\n}\nexports.getState = getState;\nfunction setState(newState) {\n    const nextState = typeof newState === \"function\" ? newState(initialState) : newState;\n    initialState = nextState;\n    notifySubscribers();\n}\nexports.setState = setState;\nfunction subscribe(callback) {\n    subscribers.push(callback);\n}\nexports.subscribe = subscribe;\nfunction notifySubscribers() {\n    subscribers.forEach((callback) => callback(initialState));\n}\n\n\n//# sourceURL=webpack://LibreDraft/./src/stateManager.ts?");

/***/ }),

/***/ "./src/ui/applicationBar.ts":
/*!**********************************!*\
  !*** ./src/ui/applicationBar.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApplicationBar = void 0;\nconst canvas_1 = __webpack_require__(/*! ../canvas */ \"./src/canvas/index.ts\");\nclass ApplicationBar {\n    constructor() {\n        this.canvas = canvas_1.Canvas.getCanvasElement();\n        this.menu = document.getElementById(\"menu\");\n        this.menuButton = document.getElementById(\"menu-button\");\n        this.saveButton = document.getElementById(\"save-button\");\n        this.openButton = document.getElementById(\"open-button\");\n        this.menuButtonClick = () => {\n            if (this.menu.style.display == \"none\") {\n                this.menu.style.display = \"block\";\n                this.menu.focus();\n            }\n            else {\n                this.menu.style.display = \"none\";\n            }\n        };\n        this.menuFocusOut = () => {\n            this.menu.style.display = \"none\";\n        };\n        this.openButtonClick = () => {\n            const openLink = document.createElement(\"input\");\n            openLink.type = \"file\";\n            openLink.accept = \".svg\";\n            openLink.addEventListener(\"change\", this.handleFileLoad);\n            openLink.click();\n        };\n        this.saveButtonClick = () => {\n            const svgData = this.canvas.innerHTML;\n            const blob = new Blob([svgData], { type: \"image/svg+xml\" });\n            const downloadLink = document.createElement(\"a\");\n            downloadLink.href = URL.createObjectURL(blob);\n            downloadLink.download = \"my-design.svg\";\n            downloadLink.click();\n            URL.revokeObjectURL(downloadLink.href);\n        };\n        this.attachEventListeners();\n    }\n    attachEventListeners() {\n        this.menu.addEventListener(\"focusout\", this.menuFocusOut);\n        this.menuButton.addEventListener(\"mouseup\", this.menuButtonClick);\n        this.openButton.addEventListener(\"mouseup\", this.openButtonClick);\n        this.saveButton.addEventListener(\"mouseup\", this.saveButtonClick);\n    }\n    handleFileLoad(event) {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.readAsText(file);\n        reader.onload = function (event) {\n            const svgContent = event.target.result;\n            const svgElement = document.getElementById(\"canvas\");\n            svgElement.innerHTML = svgContent;\n        };\n    }\n}\nexports.ApplicationBar = ApplicationBar;\n\n\n//# sourceURL=webpack://LibreDraft/./src/ui/applicationBar.ts?");

/***/ }),

/***/ "./src/ui/drawingPanel.ts":
/*!********************************!*\
  !*** ./src/ui/drawingPanel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DrawingPanel = void 0;\nconst arcListener_1 = __webpack_require__(/*! ../elements/arc/arcListener */ \"./src/elements/arc/arcListener.ts\");\nconst circleListener_1 = __webpack_require__(/*! ../elements/circle/circleListener */ \"./src/elements/circle/circleListener.ts\");\nconst lineListener_1 = __webpack_require__(/*! ../elements/line/lineListener */ \"./src/elements/line/lineListener.ts\");\nconst rectangleListener_1 = __webpack_require__(/*! ../elements/rectangle/rectangleListener */ \"./src/elements/rectangle/rectangleListener.ts\");\nconst textListener_1 = __webpack_require__(/*! ../elements/text/textListener */ \"./src/elements/text/textListener.ts\");\nclass DrawingPanel {\n    constructor(canvas) {\n        document.getElementById(\"line-button\").addEventListener(\"click\", () => {\n            new lineListener_1.LineListener().attachListenersToCanvas();\n        });\n        document\n            .getElementById(\"rectangle-button\")\n            .addEventListener(\"click\", () => {\n            new rectangleListener_1.RectangleListener().attachListenersToCanvas();\n        });\n        document.getElementById(\"circle-button\").addEventListener(\"click\", () => {\n            new circleListener_1.CircleListener().attachListenersToCanvas();\n        });\n        document.getElementById(\"arc-button\").addEventListener(\"click\", () => {\n            new arcListener_1.ArcListener().attachListenersToCanvas();\n        });\n        document.getElementById(\"text-button\").addEventListener(\"click\", () => {\n            new textListener_1.TextListener().attachListenersToCanvas();\n        });\n    }\n}\nexports.DrawingPanel = DrawingPanel;\n\n\n//# sourceURL=webpack://LibreDraft/./src/ui/drawingPanel.ts?");

/***/ }),

/***/ "./src/ui/editingPanel.ts":
/*!********************************!*\
  !*** ./src/ui/editingPanel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EditingPanel = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../stateManager */ \"./src/stateManager.ts\");\nclass EditingPanel {\n    constructor() {\n        this.strokeColorButton = document.getElementById(\"stroke-color-button\");\n        this.strokeColorInput = document.getElementById(\"stroke-color-input\");\n        this.strokeWidthInput = document.getElementById(\"stroke-width-input\");\n        this.strokeWidthButton = document.getElementById(\"stroke-width-button\");\n        this.strokeWidthValue = document.getElementById(\"stroke-width-value\");\n        this.fillColorButton = document.getElementById(\"fill-color-button\");\n        this.fillColorInput = document.getElementById(\"fill-color-input\");\n        this.opacityButton = document.getElementById(\"opacity-button\");\n        this.opacityInput = document.getElementById(\"opacity-input\");\n        this.opacityValue = document.getElementById(\"opacity-value\");\n        this.fontSizeButton = document.getElementById(\"font-size-button\");\n        this.fontSizeInput = document.getElementById(\"font-size-input\");\n        this.fontSizeValue = document.getElementById(\"font-size-value\");\n        this.attachEventListeners();\n    }\n    attachEventListeners() {\n        var _a;\n        this.strokeColorButton.addEventListener(\"click\", () => this.strokeColorInput.click());\n        this.strokeColorInput.addEventListener(\"input\", this.changeStroke);\n        this.strokeWidthButton.addEventListener(\"click\", () => {\n            if (this.strokeWidthInput.style.display === \"none\") {\n                this.strokeWidthInput.style.display = \"inline-block\";\n            }\n            else {\n                this.strokeWidthInput.style.display = \"none\";\n            }\n        });\n        (_a = this.strokeWidthValue) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", () => this.strokeWidthButton.click());\n        this.strokeWidthInput.addEventListener(\"change\", this.changeStrokeWidth);\n        this.strokeWidthInput.addEventListener(\"focusout\", () => (this.strokeWidthInput.style.display = \"none\"));\n        this.fillColorButton.addEventListener(\"click\", () => this.fillColorInput.click());\n        this.fillColorInput.addEventListener(\"input\", this.changeFillColor);\n        this.opacityButton.addEventListener(\"click\", () => {\n            if (this.opacityInput.style.display === \"none\") {\n                this.opacityInput.style.display = \"inline-block\";\n            }\n            else {\n                this.opacityInput.style.display = \"none\";\n            }\n        });\n        this.opacityInput.addEventListener(\"change\", this.changeOpacity);\n        this.opacityInput.addEventListener(\"focusout\", () => (this.opacityInput.style.display = \"none\"));\n        this.opacityValue.addEventListener(\"click\", () => this.opacityButton.click());\n        this.fontSizeButton.addEventListener(\"click\", () => {\n            if (this.fontSizeInput.style.display === \"none\") {\n                this.fontSizeInput.style.display = \"inline-block\";\n            }\n            else {\n                this.fontSizeInput.style.display = \"none\";\n            }\n        });\n        this.fontSizeInput.addEventListener(\"change\", this.changeFontSize);\n        this.fontSizeInput.addEventListener(\"focusout\", () => (this.fontSizeInput.style.display = \"none\"));\n        this.fontSizeValue.addEventListener(\"click\", () => this.fontSizeButton.click());\n    }\n    changeStroke(event) {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { stroke: event.target.value })));\n        if ((0, stateManager_1.getState)().selectedElement) {\n            (0, stateManager_1.getState)().selectedElement.setAttribute(\"stroke\", event.target.value);\n        }\n    }\n    changeStrokeWidth(event) {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { strokeWidth: parseInt(event.target.value) })));\n        if ((0, stateManager_1.getState)().selectedElement) {\n            (0, stateManager_1.getState)().selectedElement.setAttribute(\"stroke-width\", parseInt(event.target.value).toString());\n        }\n        document.getElementById(\"stroke-width-value\").innerText =\n            event.target.value;\n    }\n    changeFillColor(event) {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { stroke: event.target.value })));\n        if ((0, stateManager_1.getState)().selectedElement) {\n            (0, stateManager_1.getState)().selectedElement.setAttribute(\"fill\", event.target.value);\n        }\n    }\n    changeOpacity(event) {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { opacity: parseFloat(event.target.value) })));\n        if ((0, stateManager_1.getState)().selectedElement) {\n            (0, stateManager_1.getState)().selectedElement.setAttribute(\"opacity\", parseFloat(event.target.value).toString());\n        }\n        document.getElementById(\"opacity-value\").innerText = event.target.value;\n    }\n    changeFontSize(event) {\n        (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { fontSize: parseFloat(event.target.value) })));\n        if ((0, stateManager_1.getState)().selectedElement) {\n            (0, stateManager_1.getState)().selectedElement.setAttribute(\"font-size\", `${parseFloat(event.target.value)}px`);\n        }\n        document.getElementById(\"font-size-value\").innerText = event.target.value;\n    }\n}\nexports.EditingPanel = EditingPanel;\n\n\n//# sourceURL=webpack://LibreDraft/./src/ui/editingPanel.ts?");

/***/ }),

/***/ "./src/ui/index.ts":
/*!*************************!*\
  !*** ./src/ui/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatusBar = exports.EditingPanel = exports.DrawingPanel = void 0;\nvar drawingPanel_1 = __webpack_require__(/*! ./drawingPanel */ \"./src/ui/drawingPanel.ts\");\nObject.defineProperty(exports, \"DrawingPanel\", ({ enumerable: true, get: function () { return drawingPanel_1.DrawingPanel; } }));\nvar editingPanel_1 = __webpack_require__(/*! ./editingPanel */ \"./src/ui/editingPanel.ts\");\nObject.defineProperty(exports, \"EditingPanel\", ({ enumerable: true, get: function () { return editingPanel_1.EditingPanel; } }));\nvar statusBar_1 = __webpack_require__(/*! ./statusBar */ \"./src/ui/statusBar.ts\");\nObject.defineProperty(exports, \"StatusBar\", ({ enumerable: true, get: function () { return statusBar_1.StatusBar; } }));\n\n\n//# sourceURL=webpack://LibreDraft/./src/ui/index.ts?");

/***/ }),

/***/ "./src/ui/statusBar.ts":
/*!*****************************!*\
  !*** ./src/ui/statusBar.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatusBar = void 0;\nconst stateManager_1 = __webpack_require__(/*! ../stateManager */ \"./src/stateManager.ts\");\nclass StatusBar {\n    constructor() {\n        this.handleOSnapClick = () => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { oSnap: !(0, stateManager_1.getState)().oSnap })));\n            if ((0, stateManager_1.getState)().oSnap) {\n                this.oSnapButton.style.color = \"#fff\";\n                this.oSnapButton.style.fontWeight = \"bold\";\n            }\n            else {\n                this.oSnapButton.style.color = \"#bbb\";\n                this.oSnapButton.style.fontWeight = \"normal\";\n            }\n        };\n        this.handleOrthoClick = () => {\n            (0, stateManager_1.setState)((state) => (Object.assign(Object.assign({}, state), { ortho: !(0, stateManager_1.getState)().ortho })));\n            if ((0, stateManager_1.getState)().ortho) {\n                this.orthoButton.style.color = \"#fff\";\n                this.orthoButton.style.fontWeight = \"bold\";\n            }\n            else {\n                this.orthoButton.style.color = \"#bbb\";\n                this.orthoButton.style.fontWeight = \"normal\";\n            }\n        };\n        this.oSnapButton = document.getElementById(\"o-snap\");\n        this.orthoButton = document.getElementById(\"ortho\");\n        this.attachEventListeners();\n    }\n    attachEventListeners() {\n        this.oSnapButton.addEventListener(\"click\", this.handleOSnapClick);\n        this.orthoButton.addEventListener(\"click\", this.handleOrthoClick);\n    }\n}\nexports.StatusBar = StatusBar;\n\n\n//# sourceURL=webpack://LibreDraft/./src/ui/statusBar.ts?");

/***/ }),

/***/ "./src/utility.ts":
/*!************************!*\
  !*** ./src/utility.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.oSnap = exports.toSvgPoint = exports.toWcs = void 0;\nfunction toWcs(svg, x, y) {\n    const height = svg.getBoundingClientRect().height;\n    if (height) {\n        y = Math.round(height - y);\n    }\n    return {\n        x: x,\n        y: y,\n    };\n}\nexports.toWcs = toWcs;\nfunction toSvgPoint(svg, x, y) {\n    const point = svg.createSVGPoint();\n    point.x = x;\n    point.y = y;\n    const transferPoint = point.matrixTransform(svg.getScreenCTM().inverse());\n    return { x: parseInt(transferPoint.x), y: parseInt(transferPoint.y) };\n}\nexports.toSvgPoint = toSvgPoint;\nfunction oSnap(x, y) {\n    let minDist = 100000;\n    let targetPoint = { x: x, y: y };\n    let elements = document.querySelectorAll(\"body *\");\n    elements.forEach(function (element) {\n        if (element.tagName === \"line\") {\n            const x1 = parseInt(element.getAttribute(\"x1\"));\n            const y1 = parseInt(element.getAttribute(\"y1\"));\n            const x2 = parseInt(element.getAttribute(\"x2\"));\n            const y2 = parseInt(element.getAttribute(\"y2\"));\n            let distFromStart = Math.sqrt((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y));\n            if (distFromStart < minDist) {\n                minDist = distFromStart;\n                targetPoint = { x: x1, y: y1 };\n            }\n            let distFromEnd = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));\n            if (distFromEnd < minDist) {\n                minDist = distFromEnd;\n                targetPoint = { x: x2, y: y2 };\n            }\n        }\n    });\n    return targetPoint;\n}\nexports.oSnap = oSnap;\n\n\n//# sourceURL=webpack://LibreDraft/./src/utility.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;